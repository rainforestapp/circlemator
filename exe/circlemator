#!/usr/bin/env ruby
# frozen_string_literal: true
lib = File.expand_path('../../lib', __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'optparse'
require 'circlemator/build_canceler'
require 'circlemator/self_merger'
require 'circlemator/github_repo'
require 'circlemator/style_checker'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: circlemator (self-merge|cancel-old) [options]'

  opts.on('-bBRANCH', '--base-branch=BRANCH', 'Base branch for merging') do |b|
    options[:base_branch] = b
  end

  opts.on('-cBRANCH', '--compare-branch=BRANCH', 'Compare branch for merging') do |b|
    options[:compare_branch] = b
  end

  opts.on('-gTOKEN', '--github-auth-token=TOKEN', 'Github auth token') do |t|
    options[:github_auth_token] = t
  end

  opts.on('-tTOKEN', '--circle-api-token=TOKEN', 'CircleCI API token') do |t|
    options[:circle_api_token] = t
  end

  opts.on('--clean', 'Clean existing comments before commenting on a pull request') do
    options[:clean] = true
  end

  opts.on('-h', '--help', 'Print this help message') do
    puts opts
    exit
  end
end

parser.parse!

def require_env(var)
  if !ENV[var] || ENV[var].empty?
    puts "Environment variable '#{var}' is required"
    exit 1
  end

  ENV[var]
end

def require_opt(opts, key)
  if !opts[key]
    puts "Option #{key.to_s.gsub(/_/, '-')} is required!"
    exit 1
  end
end

if !ENV['CIRCLECI']
  puts 'Cirlemator should only be run from CircleCI'
  exit 1
end

options[:user] = require_env 'CIRCLE_PROJECT_USERNAME'
options[:repo] = require_env 'CIRCLE_PROJECT_REPONAME'
options[:github_auth_token] ||= ENV['GITHUB_ACCESS_TOKEN']
options[:github_auth_token] ||= ENV['GITHUB_AUTH_TOKEN']

case ARGV[0]
when 'self-merge'
  options[:sha] = require_env 'CIRCLE_SHA1'
  require_opt options, :github_auth_token
  require_opt options, :base_branch
  require_opt options, :compare_branch
  options[:github_repo] = Circlemator::GithubRepo.new(options)

  Circlemator::SelfMerger.new(options).merge!
when 'cancel-old'
  options[:current_build] = require_env('CIRCLE_BUILD_NUM').to_i
  options[:circle_api_token] ||= ENV['CIRCLE_API_TOKEN']
  require_opt options, :circle_api_token

  Circlemator::BuildCanceler.new(options).cancel_old_builds!
when 'style-check'
  options[:sha] = require_env 'CIRCLE_SHA1'
  options[:compare_branch] ||= require_env 'CIRCLE_BRANCH'
  require_opt options, :github_auth_token
  require_opt options, :base_branch
  options[:github_repo] = Circlemator::GithubRepo.new(options)

  Circlemator::StyleChecker.new(options).check!
else
  puts parser
end

# Local Variables:
# major-mode: ruby-mode
# End:
